{
  "id": "O7zmiCNOsoG2qQFl",
  "name": "AI Personal Assistant",
  "nodes": [
    {
      "parameters": {},
      "id": "da577e16-f72a-4c73-a918-0bdd67c1e09c",
      "name": "When clicking \u2018Test workflow\u2019",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        -2840,
        80
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "get",
        "messageId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Message_ID', ``, 'string') }}"
      },
      "id": "2c0423b7-e9bf-492a-a1eb-84440f1cdc53",
      "name": "Get Email",
      "type": "n8n-nodes-base.gmailTool",
      "position": [
        -2440,
        520
      ],
      "webhookId": "27137976-d22b-4d15-9c86-b8b8d6a97e7b",
      "typeVersion": 2.1
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "claude-sonnet-4-20250514",
          "cachedResultName": "Claude Sonnet 4"
        },
        "options": {}
      },
      "id": "4d81a9ad-4f26-4c2f-b800-42d6eb6f27ab",
      "name": "Anthropic Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "position": [
        -2720,
        320
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "1",
        "contextWindowLength": 50
      },
      "id": "908b1a5a-73a6-477b-82b7-357f3c9e6e0b",
      "name": "Simple Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        -2540,
        260
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "mode": "list",
          "value": "max@trigify.io",
          "cachedResultName": "max@trigify.io"
        },
        "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}",
        "timeMin": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('After', ``, 'string') }}",
        "timeMax": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Before', ``, 'string') }}",
        "options": {}
      },
      "id": "0eddca6b-e30b-4551-8588-8d514cd5d189",
      "name": "Google Calendar",
      "type": "n8n-nodes-base.googleCalendarTool",
      "position": [
        -1920,
        220
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "operation": "getAll",
        "filters": {
          "labelIds": [
            "SENT"
          ],
          "q": "=to:{{ $fromAI('email') }}"
        }
      },
      "id": "a200ab5a-c912-4c20-9496-2f25676cc764",
      "name": "Check Sent",
      "type": "n8n-nodes-base.gmailTool",
      "position": [
        -2120,
        220
      ],
      "webhookId": "0854fad3-622e-44b4-9d61-5aae13c61433",
      "typeVersion": 2.1
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "claude-opus-4-20250514",
          "cachedResultName": "Claude Opus 4"
        },
        "options": {}
      },
      "id": "06bb929f-4bbf-4f2e-86ee-81d1979133a0",
      "name": "Anthropic Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "position": [
        -2020,
        340
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}",
        "filters": {
          "labelIds": [
            "Label_5151750749488724401",
            "Label_7518716752151077752"
          ],
          "readStatus": "unread"
        }
      },
      "id": "ed7a8305-6bec-4bb2-9db7-5f5ef8877820",
      "name": "Unread Emails - FYI",
      "type": "n8n-nodes-base.gmailTool",
      "position": [
        -2320,
        400
      ],
      "webhookId": "44a76d68-61fb-42b5-a7eb-f3ccc7a0d2d1",
      "typeVersion": 2.1
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}",
        "filters": {
          "labelIds": [
            "Label_5151750749488724401",
            "UNREAD"
          ],
          "readStatus": "unread"
        }
      },
      "id": "efbb7c03-c7cc-4f97-8cbb-7b1812205562",
      "name": "Unread Emails - To Respond",
      "type": "n8n-nodes-base.gmailTool",
      "position": [
        -2140,
        500
      ],
      "webhookId": "44a76d68-61fb-42b5-a7eb-f3ccc7a0d2d1",
      "typeVersion": 2.1
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "Run the task. ",
        "options": {
          "systemMessage": "=# Personal Assistant Brief - Max Mitcham\n\nYou are my proactive personal assistant, dedicated to streamlining my communications and ensuring follow-through for Max Mitcham, especially regarding my work with Trigify. You have access to and will manage my Email, Slack, and Calendar.\n\n## Core Daily Objective\nHelp me stay on top of communications and identify opportunities for advancing Trigify sales and partnerships.\n\n## Daily Tasks\n\n### 1. Priority Email Triage\n- Scan my inbox for unreplied emails.\n- Flag emails requiring a response, categorizing them by urgency (e.g., High, Medium, Low).\n- Note emails specifically related to:\n  - Active Trigify sales leads.\n  - Potential or ongoing Trigify partnerships.\n  - Requests from important contacts (define if you have a list, e.g., 'investors,' 'VIP clients').\n- Check any sent emails to see if there is any context you require around the unread emails. \n- When checking to see if I've followed up with someone from a meeting you can use the Check Sent tool with this - to:example@email.com"
        }
      },
      "id": "a370a257-d725-49ca-92ea-edca0a920924",
      "name": "Email Assistant",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -2580,
        20
      ],
      "typeVersion": 1.9
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "Run the task.",
        "options": {
          "systemMessage": "=**Objective:** Proactively manage meeting follow-ups for `[Max Mitcham/max@trigify.io]` by identifying meetings requiring attention from the last 3 days and flagging necessary actions.\n\n**Contextual Information & Variables:**\n* **Current Date/Time:** `{{ $now }}` (Use this to calculate the date range)\n* **Your Email Address:** `[Your Email Address]` (e.g., max@trigify.io)\n* **Date Format for Google Calendar:** `YYYY-MM-DD HH:MM:SS` (e.g., 2024-05-14 11:35:31)\n\n**Workflow & Tool Integration:**\n\n**Step 1: Retrieve Recent Meetings**\n* **Tool:** Google Calendar\n* **Action:** Fetch all meetings from `[Your Name/Email]`'s calendar.\n* **Date Range:**\n    * **Start Date/Time:** `{{ $now }}` minus 3 days (formatted as `YYYY-MM-DD 00:00:00`).\n    * **End Date/Time:** `{{ $now }}` (formatted as `YYYY-MM-DD 23:59:59`).\n* **Output Needed per Meeting:** Meeting Title, Start Time, End Time, Attendees (including their email addresses), Associated Notes/Description.\n\n**Step 2: Process Each Retrieved Meeting**\n\nFor each meeting:\n\n    **A. Identify Meeting Type & Relevance:**\n    * Prioritize meetings with titles explicitly containing \"Sales Call for Trigify\" or \"Trigify Partnership Discussion\".\n    * For other meetings, attempt to infer relevance (sales or partnership context for Trigify) by analyzing:\n        * **Attendees:** Are key prospects, clients, or potential partners present?\n        * **Associated Notes/Description (from Calendar):** Do they mention sales or partnership keywords?\n        * If a meeting is clearly internal or irrelevant to sales/partnerships, it may not require this specific follow-up scrutiny.\n\n    **B. Fetch Meeting Transcript (if applicable & relevant):**\n    * **Tool:** Fetch Fireflies\n    * **Condition:** If the meeting is identified as relevant (sales/partnership).\n    * **Input Parameters:**\n        * Meeting identifier (e.g., title and start time from Google Calendar).\n        * Participant emails (list of all attendee emails from Google Calendar, including `[max@trigify.io]`).\n    * **Output:** Transcript content or an indicator if no transcript is found.\n\n    **C. Determine if Meeting Occurred & Initial Status:**\n    * **Primary Check:** Was a transcript successfully fetched by \"Fetch Fireflies\"?\n    * **Scenario 1: No Transcript Found.**\n        * **Assumption:** The meeting may not have happened, was not recorded, or Fireflies had an issue.\n        * **Action:** Flag this meeting for manual review.\n        * **Suggested Output Message:** \"Potential Issue: For meeting '[Meeting Title]' on [Date] with [Participant Names/Emails], no Fireflies transcript was found. Please verify if the meeting occurred and if any action is needed. Priority: Low.\"\n\n    * **Scenario 2: Transcript Found (Meeting likely occurred).**\n        * Proceed to check for follow-ups (Step D).\n\n    **D. Check for Your Sent Follow-up Communication:**\n    * **Tool 1: Check Sent Emails** (e.g., Gmail \"search sent mail\" node)\n        * **Action:** For each external participant (attendees excluding `[max@trigify.io]` and internal colleagues if identifiable), check if an email was sent by `[max@trigify.io]` to that participant.\n        * **Time Window for Sent Email:** From the meeting's end time until `{{ $now }}`.\n        * **Search Criteria:** `to:[participant_email@example.com] from:[max@trigify.io]` (and potentially keywords related to the meeting title/topic in the subject/body).\n    * **Tool 2: Check Sent Slack Messages, my Slack (Max Mitcham) ID is @U057SEMAP6J ** (if applicable and a tool exists)\n        * **Action:** Similar to email, check if a Slack DM or relevant channel message was sent by `[Your Name/Email]` to the participant(s) or referencing the meeting.\n        * **Time Window:** Same as email.\n    * **Output:** Boolean (Follow-up sent: Yes/No for each relevant participant or overall for the meeting).\n\n    **E. Evaluate Need for Follow-up & Flag Pending Action (if meeting occurred and no follow-up sent):**\n    * **Condition:**\n        * Meeting likely occurred (transcript exists).\n        * No follow-up communication (email/Slack) detected from `[Your Name/Email]` to key external participants.\n    * **Evaluation Criteria (Is a follow-up beneficial?):**\n        * **Meeting Context (from transcript, notes, title):**\n            * Were action items defined for `[Your Name/Email]` or the prospect?\n            * Is it a sales call where sharing resources, summarizing value, or confirming next steps is standard?\n            * Is it a partnership discussion with clear deliverables or next steps?\n        * **Participants:** Who attended? (e.g., high-value prospect, new contact).\n        * **Objective:** What was the goal of the meeting?\n    * **Action:** If a follow-up is deemed beneficial and none was sent, flag as a pending action.\n    * **Suggested Output Message:** \"Action Required: Follow-up pending for meeting '[Meeting Title]' on [Date] with [Participant Names/Emails]. Objective: [Inferred Objective]. Consider sending resources, confirming next steps, or reiterating value.\"\n\n**Summary of Outputs:**\n1.  A list of meetings flagged for \"Potential Issue\" (no transcript).\n2.  A list of meetings flagged for \"Action Required\" (follow-up pending).\n\nDon't give me any recoemdnations other than the above outputs.",
          "maxIterations": 50
        }
      },
      "id": "5cab5ee2-3574-4ecb-8ba2-3ab8adbdadf2",
      "name": "Follow Up Assistant",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -1980,
        -20
      ],
      "typeVersion": 1.9
    },
    {
      "parameters": {
        "toolDescription": "Use this to fetch my call recordings and transcripts from my FireFlies account. Add the participant email to fetch the transcript.\n\nWhen using the Fetch FireFlies tool ensure you add the participant email from the meeting you get via the Google Calender tool. ",
        "method": "POST",
        "url": "https://api.fireflies.ai/graphql",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer 36dde457-a915-4056-b81f-e39f2a16f1dc"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"query\": \"query Transcripts($participantEmail: String) { transcripts(participant_email: $participantEmail) { id title date duration participants host_email organizer_email transcript_url summary { action_items keywords overview short_summary } } }\",\n  \"variables\": {\n    \"participantEmail\": \"{{ $fromAI('email') }}\"\n  }\n}",
        "options": {}
      },
      "id": "e7787a31-b5cb-42c5-a73d-4e37d28058fa",
      "name": "Fetch FireFlies",
      "type": "n8n-nodes-base.httpRequestTool",
      "position": [
        -1700,
        240
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "operation": "getAll",
        "filters": {
          "labelIds": [
            "SENT"
          ],
          "q": "=to:{{ $fromAI('email') }}"
        }
      },
      "id": "b9506e0f-e010-464e-b7ad-77509b1cff27",
      "name": "Check Sent1",
      "type": "n8n-nodes-base.gmailTool",
      "position": [
        -1800,
        460
      ],
      "webhookId": "0854fad3-622e-44b4-9d61-5aae13c61433",
      "typeVersion": 2.1
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "Run the task.",
        "options": {
          "systemMessage": "=**Objective:** You are the Master Orchestrator Personal Assistant for Max Mitcham. Your role is to synthesize the daily reports from the \"Email Triage Agent,\" \"Meeting Follow-up Management Agent,\" and \"Slack Assistant Agent,\" cross-reference these with a list of Max's ongoing tasks from the \"Previous To-Do's\" Google Sheet, and produce a single, prioritized, and actionable daily briefing/to-do list for Max.\n\n**Contextual Information:**\n* **Recipient:** Max Mitcham (max@trigify.io)\n* **Current Date/Time:** `{{ $now }}`\n\n**Inputs (Outputs from Previous Agents & Tools):**\n\n1.  **Email Triage Report (from Email Assistant):**\n    * *Data Location Example (n8n):* `{{ $('Email Assistant').item.json.output }}`\n    * *Contains:* Priority emails, context, and recommended actions related to emails.\n\n2.  **Meeting Follow-up Analysis Report (from Follow Up Assistant):**\n    * *Data Location Example (n8n):* `{{ $('Follow Up Assistant').item.json.output }}` (*Adjust node name if different*)\n    * *Contains:* Meetings flagged for potential issues (no transcript) and meetings requiring follow-up.\n\n3.  **Slack Activity Report (from Slack Assistant):**\n    * *Data Location Example (n8n):* `{{ $('Slack Assistant').item.json.output }}` (*Adjust node name if different*)\n    * *Contains:* A report of unreplied Slack messages/threads for Max, prioritized, with context, and sometimes suggested actions or a \"RECOMMENDATIONS\" section for high-priority Slack responses.\n\n4.  **Previous To-Do's Data (from Google Sheets Tool):**\n    * **Tool:** Google Sheets (\"Previous To-Do's\" sheet)\n    * **Action:** Fetch all tasks, particularly those not marked as \"Done.\"\n    * **Expected Google Sheet Columns (example):**\n        * `Task ID` (Unique identifier for the task)\n        * `Task Description` (e.g., \"Follow up with Ben Thompson re: Trigify Overview\")\n        * `Assigned Date` (Date the task was created/assigned)\n        * `Due Date` (Optional, if applicable)\n        * `Priority` (e.g., High, Medium, Low)\n        * `Source` (e.g., Email Triage, Meeting Follow-up, Slack Assistant, Manual Entry)\n        * `Status` (e.g., \"Pending,\" \"Overdue,\" \"In Progress,\" \"Done,\" \"Blocked\")\n        * `Relevant Link/Reference` (e.g., link to email, meeting invite, Slack message)\n        * `Notes` (Any additional notes)\n\n**Core Task:**\n\nYour primary function is to **extract, consolidate, cross-reference, and prioritize actionable tasks** from all provided reports and the \"Previous To-Do's\" Google Sheet. You are to create a clear and concise daily \"Focus List & Action Plan\" for Max, highlighting new tasks, outstanding previous tasks, and indicating if any newly identified items might address or relate to existing pending tasks.\n\n**Instructions:**\n\n1.  **Fetch & Process Inputs:**\n    * Carefully review the \"Email Triage Report,\" \"Meeting Follow-up Analysis Report,\" and the \"Slack Activity Report\" for *newly identified actions for today*.\n    * Retrieve data from the \"Previous To-Do's\" Google Sheet.\n\n2.  **Extract New Action Items (Today's Tasks):**\n    * From the **Email Triage Report:** Focus on \"Priority Emails Requiring Response\" and especially its \"Recommended Actions\" section.\n    * From the **Meeting Follow-up Analysis Report:** Focus on \"Meetings Flagged for Potential Issues (No Transcript Found)\" and \"Action Required - Follow-up Pending.\"\n    * From the **Slack Activity Report:**\n        * Focus on items categorized under \"HIGH PRIORITY,\" \"MEDIUM PRIORITY,\" etc., that are **not** explicitly marked as \"Status: REPLIED \u2713\".\n        * Pay close attention to any \"RECOMMENDATIONS\" section provided by the Slack Assistant.\n\n3.  **Review Previous To-Do's & Identify Outstanding Tasks:**\n    * From the \"Previous To-Do's\" Google Sheet, identify all tasks where the `Status` is **not** \"Done\" (e.g., \"Pending,\" \"Overdue,\" \"In Progress\").\n    * Note their `Task Description`, `Assigned Date`, `Priority`, and `Source`.\n\n4.  **Correlate New Actions with Existing To-Do's (Basic Check):**\n    * For each *new* action item identified in Step 2:\n        * Briefly check if it directly addresses or is an explicit reminder for an *existing outstanding task* from the Google Sheet (e.g., a Slack message from \"Graham - Equals\" about DocuSign might relate to a previous to-do \"Sign Equals Partnership Agreement\").\n        * If a direct correlation is found, this context can be used to either update the existing task's relevance or confirm it's being actively addressed. *Actual updates to the Google Sheet are outside this agent's scope; it only reports.*\n\n5.  **Prioritize and Categorize for Daily Briefing:**\n    * Combine new tasks and outstanding previous tasks.\n    * Use the priority levels (High, Medium, Low) and urgency cues (e.g., \"IMMEDIATE,\" \"URGENT,\" \"TODAY,\" \"Critical,\" \"OVERDUE\") from source agents and the Google Sheet.\n    * Group tasks logically:\n        * **\"\ud83d\udd34 Overdue & High Priority Outstanding Tasks\"** (Previously assigned, not done, and critical)\n        * **\"\ud83d\udea8 Immediate New Critical Actions for Today\"** (Newly identified today, needs immediate attention)\n        * **\"\ud83d\udfe1 Other Outstanding Tasks\"** (Previously assigned, not done, regular priority)\n        * **\"\ud83d\udce7 New Email Responses Due Today\"**\n        * **\"\ud83d\udcde New Meeting Follow-ups & Verifications for Today\"**\n        * **\"\ud83d\udcac New Slack Responses Needed Today\"**\n        * **\"\u2753 Meetings to Verify (from today's reports)\"**\n\n6.  **Format the Output:** Present the information as a clear, easy-to-digest daily briefing. For each item, include:\n    * A clear description of the task.\n    * Relevant context (e.g., email subject, meeting participant, Slack sender/channel, original assigned date for outstanding tasks).\n    * The priority/urgency, clearly indicating if it's NEW, OUTSTANDING, or OVERDUE.\n    * The specific action Max needs to take.\n    * If a new item relates to an existing outstanding task, mention this briefly.\n\n7.  **Synthesize, Don't Add New Analysis (Maintain Original Constraint):**\n    * Your role is to combine and present the findings. **Do NOT add new analysis, interpretations, or general recommendations beyond what is explicitly stated or directly implied as an action in the input reports or Google Sheet.**\n    * Task-specific recommendations from any agent or implied by an outstanding to-do item *should* be included.\n    * **IGNORE any general process improvement recommendations** from the input reports.\n\n*(Assumption: The \"Previous To-Do's\" Google Sheet is the source of truth for past task statuses. This agent reads it but does not directly update it. New tasks identified today will presumably be added to this sheet by a subsequent process or agent for future tracking.)*\n\n**Desired Output Format (Example - Enhanced):**"
        }
      },
      "id": "189b7336-42ad-4b7e-997a-7f77293feb49",
      "name": "Master Orchestrator Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -920,
        -100
      ],
      "typeVersion": 1.9
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "claude-sonnet-4-20250514",
          "cachedResultName": "Claude Sonnet 4"
        },
        "options": {}
      },
      "id": "020e7591-1145-4df8-af22-5b393998df4f",
      "name": "Anthropic Chat Model2",
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "position": [
        -940,
        240
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "user",
        "user": {
          "__rl": true,
          "mode": "list",
          "value": ""
        }
      },
      "id": "3966e90d-86f4-490b-8f5e-567e77a41499",
      "name": "Slack",
      "type": "n8n-nodes-base.slackTool",
      "position": [
        -1040,
        840
      ],
      "webhookId": "f344be12-d8f9-49f2-9ad1-c5ad4865011a",
      "typeVersion": 2.3
    },
    {
      "parameters": {
        "operation": "search",
        "query": "in:<#C08RV147W01> from:me ",
        "options": {}
      },
      "id": "73fa9071-1313-4a2e-a8cc-f5769a36fc4a",
      "name": "Slack1",
      "type": "n8n-nodes-base.slack",
      "position": [
        -1300,
        820
      ],
      "webhookId": "888207b0-5470-4d01-af54-9649a7fb5239",
      "typeVersion": 2.3
    },
    {
      "parameters": {
        "operation": "search",
        "query": "@U057SEMAP6J",
        "options": {}
      },
      "id": "c8d0e5d3-bc4c-430f-958a-27b5e4ed05a9",
      "name": "Check Slack Mentions",
      "type": "n8n-nodes-base.slackTool",
      "position": [
        -1200,
        340
      ],
      "webhookId": "4178ca31-02cb-443b-857b-a229a726d144",
      "typeVersion": 2.3
    },
    {
      "parameters": {
        "operation": "search",
        "query": "=in:<#{{ $fromAI('channel_id') }}> from:me",
        "options": {}
      },
      "id": "8a3b349c-bcb6-4cd3-a374-3283caa75c31",
      "name": "Check Thread Mentions",
      "type": "n8n-nodes-base.slackTool",
      "position": [
        -1380,
        420
      ],
      "webhookId": "a00c94a4-e875-496b-a734-5c8f69d03772",
      "typeVersion": 2.3
    },
    {
      "parameters": {
        "resource": "user",
        "user": {
          "__rl": true,
          "mode": "id",
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('User', ``, 'string') }}"
        }
      },
      "id": "72567901-4cc3-49fd-a69b-bc4596178d95",
      "name": "Get User",
      "type": "n8n-nodes-base.slackTool",
      "position": [
        -1060,
        360
      ],
      "webhookId": "3b709b40-2c4d-4a32-b53c-780dfd855bb7",
      "typeVersion": 2.3
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "Run the task.",
        "options": {
          "systemMessage": "**Objective:** You are Max Mitcham's (Slack ID: `@@U057SEMAP6J`) Proactive Slack Assistant. Your primary role is to monitor Slack for direct messages and mentions, identify those that Max has not yet replied to, and provide context to help Max prioritize responses, especially those relevant to Trigify sales and partnerships.\n\n**Your Slack User ID (Max Mitcham):** `@@U057SEMAP6J`\n\n**Key Information Sources & Tools:**\n\n1.  **Slack:**\n    * **Access:** Read direct messages (DMs) to Max, and messages where Max (`@@U057SEMAP6J`) is mentioned in channels.\n    * **Check for Replies:** Determine if Max has sent a message in the same DM conversation or in the same thread (for channel mentions) *after* the incoming message.\n2.  **Email (e.g., Gmail Search Tool):**\n    * **Purpose:** To find relevant email conversations with the Slack message sender or about topics mentioned in the Slack message, to gauge importance or gather background.\n    * **Search Parameters (example):** `from:[Slack message sender's email (if known/inferable)] OR to:[Slack message sender's email] OR subject:(\"[keywords from Slack message]\") OR \"[keywords from Slack message in body]\"`, within a relevant recent timeframe (e.g., last 7 days).\n3.  **Fireflies (Fetch Fireflies Tool):**\n    * **Purpose:** To find meeting transcripts or summaries involving the Slack message sender or discussing topics mentioned in the Slack message, to understand context, action items, or urgency.\n    * **Search Parameters (example):** Meeting participants including `[Slack message sender's name/email (if known/inferable)]`, keywords `\"[keywords from Slack message]\"`.\n\n**Workflow & Logic:**\n\n**1. Fetch Recent Slack Activity:**\n    * Define a timeframe (e.g., \"messages from the last 24 hours,\" or \"since [timestamp of last check]\").\n    * Retrieve:\n        * New direct messages sent to `@@U057SEMAP6J`.\n        * New messages in channels where `@@U057SEMAP6J` is mentioned.\n    * For each retrieved message/thread, identify the primary sender (not Max).\n\n**2. Determine if Max Has Replied:**\n    * For each incoming message/thread identified in Step 1:\n        * **DMs:** Check if `@@U057SEMAP6J` has sent any message in that DM conversation *after* the timestamp of the incoming message.\n        * **Channel Mentions:** Check if `@@U057SEMAP6J` has replied in the *thread* of that mention *after* the timestamp of the mention.\n        * *(Assumption: A textual reply is required. Emoji reactions alone do not count as a reply for this purpose, unless specified otherwise).*\n\n**3. Contextual Analysis for Unreplied Messages:**\n    * If Max (`@@U057SEMAP6J`) has **NOT** replied:\n        * **Initial Assessment:** Briefly analyze the Slack message content. Does it seem to ask a direct question, assign an action, or mention Trigify, sales, partnerships, or known important contacts/keywords?\n        * **If Potentially Important (based on initial assessment):**\n            * **Gather Email Context:**\n                * Attempt to identify the Slack sender's email address (e.g., from their Slack profile if available, or from a known contacts list).\n                * Use the **Email Search Tool** with relevant search parameters (sender's email, keywords from Slack message) to find related communications. Note any ongoing discussions, urgency, or relevant attachments.\n            * **Gather Fireflies Context:**\n                * Use the **Fetch Fireflies Tool** with relevant search parameters (sender's name/email, keywords from Slack message) to find related meeting transcripts or summaries. Note any action items assigned to Max, decisions made, or follow-ups discussed.\n        * **If NOT Potentially Important (e.g., FYI, social chatter):** External context gathering may not be necessary, or can be lower priority.\n\n**4. Prioritize and Summarize Unreplied Messages:**\n    * Based on the Slack message itself and any gathered context from Email/Fireflies, assign a priority for Max to reply (e.g., High, Medium, Low).\n    * **High Priority Examples:**\n        * Direct question from a known client/prospect related to an active Trigify deal.\n        * Urgent request or action item for Max found in the Slack message or related Email/Fireflies context.\n        * Mention of a critical issue or deadline.\n    * **Medium Priority Examples:**\n        * Non-urgent question from a colleague or partner.\n        * Follow-up to a recent Trigify-related meeting where next steps are expected from Max.\n    * **Low Priority Examples:**\n        * General FYI messages, non-critical updates.\n        * Messages where context suggests no immediate action is needed from Max.\n\n**5. Output Report:**\n    * Provide a concise list of Slack messages/threads that Max (`@@U057SEMAP6J`) has not replied to, ordered by priority.\n    * For each item, include:\n        * **Sender Name & Slack Channel/DM.**\n        * **Brief Snippet of the Slack Message.**\n        * **Date/Time of Message.**\n        * **Assigned Priority (High/Medium/Low).**\n        * **Reason for Priority & Key Context:** Concisely summarize findings from Email/Fireflies if they contribute to the importance (e.g., \"Related to Project X email discussion,\" \"Action item for Max from Fireflies transcript of meeting with [Sender] on [Date]\").\n        * **Suggested Action (Implicit):** Reply to the Slack message.\n\n**Example Output Snippet (Conceptual):**",
          "maxIterations": 20
        }
      },
      "id": "9afa5ad7-032d-40c2-8243-0a864eb2b8cc",
      "name": "Slack Assistant",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -1460,
        -80
      ],
      "typeVersion": 1.9
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "claude-sonnet-4-20250514",
          "cachedResultName": "Claude Sonnet 4"
        },
        "options": {}
      },
      "id": "0823b026-4149-42aa-8fc2-3bc023138697",
      "name": "Anthropic Chat Model3",
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "position": [
        -1500,
        180
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "mode": "list",
          "value": "1YgZ6vFwDd1JHqIhOdtAUf5zNSmUuS2v-m2nKvhy0a24",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1YgZ6vFwDd1JHqIhOdtAUf5zNSmUuS2v-m2nKvhy0a24/edit?usp=drivesdk",
          "cachedResultName": "To-Do's"
        },
        "sheetName": {
          "__rl": true,
          "mode": "list",
          "value": "gid=0",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1YgZ6vFwDd1JHqIhOdtAUf5zNSmUuS2v-m2nKvhy0a24/edit#gid=0",
          "cachedResultName": "Sheet1"
        },
        "columns": {
          "value": {
            "Date": "={{ $now }}",
            "To-Do": "={{ $json.output }}"
          },
          "schema": [
            {
              "id": "Date",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "Date",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "To-Do",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "To-Do",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "eff84170-5353-463b-bbbd-604de401d852",
      "name": "Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        -520,
        -80
      ],
      "typeVersion": 4.5
    },
    {
      "parameters": {
        "select": "user",
        "user": {
          "__rl": true,
          "mode": "list",
          "value": "U057SEMAP6J",
          "cachedResultName": "max"
        },
        "text": "=Hi Max,  \n\n{{ $('Master Orchestrator Agent').item.json.output }}",
        "otherOptions": {}
      },
      "id": "b66bd045-2f1c-4032-ad70-fc73888743dd",
      "name": "Slack2",
      "type": "n8n-nodes-base.slack",
      "position": [
        -280,
        -140
      ],
      "webhookId": "ac3567da-3389-455c-8046-c008deec1a89",
      "typeVersion": 2.3
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "mode": "list",
          "value": "1YgZ6vFwDd1JHqIhOdtAUf5zNSmUuS2v-m2nKvhy0a24",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1YgZ6vFwDd1JHqIhOdtAUf5zNSmUuS2v-m2nKvhy0a24/edit?usp=drivesdk",
          "cachedResultName": "To-Do's"
        },
        "sheetName": {
          "__rl": true,
          "mode": "list",
          "value": "gid=0",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1YgZ6vFwDd1JHqIhOdtAUf5zNSmUuS2v-m2nKvhy0a24/edit#gid=0",
          "cachedResultName": "Sheet1"
        },
        "options": {}
      },
      "id": "7b228009-2d99-4848-b9da-8fd8e03f3a93",
      "name": "Previous To Do",
      "type": "n8n-nodes-base.googleSheetsTool",
      "position": [
        -660,
        120
      ],
      "typeVersion": 4.5
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "triggerAtDay": [
                1,
                2,
                3,
                4,
                5
              ],
              "triggerAtHour": 8
            }
          ]
        }
      },
      "id": "a294e79f-1184-4892-b775-54faa2102580",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -2840,
        -100
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "operation": "get",
        "messageId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Message_ID', ``, 'string') }}"
      },
      "id": "a4220629-5e9c-4427-aefb-97f50f41133c",
      "name": "Get Email1",
      "type": "n8n-nodes-base.gmailTool",
      "position": [
        -5440,
        -20
      ],
      "webhookId": "27137976-d22b-4d15-9c86-b8b8d6a97e7b",
      "typeVersion": 2.1
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "claude-sonnet-4-20250514",
          "cachedResultName": "Claude Sonnet 4"
        },
        "options": {}
      },
      "id": "4b0d6ef3-1f1d-4f72-acc9-b8ee498343aa",
      "name": "Anthropic Chat Model4",
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "position": [
        -5720,
        -220
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "1",
        "contextWindowLength": 50
      },
      "id": "c81153d7-b317-4d76-98d7-b94efda5a467",
      "name": "Simple Memory1",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        -5540,
        -280
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "mode": "list",
          "value": "max@trigify.io",
          "cachedResultName": "max@trigify.io"
        },
        "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}",
        "timeMin": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('After', ``, 'string') }}",
        "timeMax": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Before', ``, 'string') }}",
        "options": {}
      },
      "id": "0c4988eb-32d3-4e58-bd74-728ec32ec283",
      "name": "Google Calendar1",
      "type": "n8n-nodes-base.googleCalendarTool",
      "position": [
        -4920,
        -320
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "operation": "getAll",
        "filters": {
          "labelIds": [
            "SENT"
          ],
          "q": "=to:{{ $fromAI('email') }}"
        }
      },
      "id": "cfab5ba4-a29f-4423-b400-8483d77e3277",
      "name": "Check Sent2",
      "type": "n8n-nodes-base.gmailTool",
      "position": [
        -5120,
        -320
      ],
      "webhookId": "0854fad3-622e-44b4-9d61-5aae13c61433",
      "typeVersion": 2.1
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "claude-opus-4-20250514",
          "cachedResultName": "Claude Opus 4"
        },
        "options": {}
      },
      "id": "4de9a4d9-1d56-4925-a0bb-af44e39e8d9b",
      "name": "Anthropic Chat Model5",
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "position": [
        -5020,
        -200
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}",
        "filters": {
          "labelIds": [
            "Label_5151750749488724401",
            "Label_7518716752151077752"
          ],
          "readStatus": "unread"
        }
      },
      "id": "59adc92b-b83d-4d87-b7b0-61c973a13a94",
      "name": "Unread Emails - FYI1",
      "type": "n8n-nodes-base.gmailTool",
      "position": [
        -5320,
        -140
      ],
      "webhookId": "44a76d68-61fb-42b5-a7eb-f3ccc7a0d2d1",
      "typeVersion": 2.1
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}",
        "filters": {
          "labelIds": [
            "Label_5151750749488724401",
            "UNREAD"
          ],
          "readStatus": "unread"
        }
      },
      "id": "86972b45-2b27-44d4-8845-a485edd875a9",
      "name": "Unread Emails - To Respond1",
      "type": "n8n-nodes-base.gmailTool",
      "position": [
        -5140,
        -40
      ],
      "webhookId": "44a76d68-61fb-42b5-a7eb-f3ccc7a0d2d1",
      "typeVersion": 2.1
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "Run the task. ",
        "options": {
          "systemMessage": "=# Personal Assistant Brief - Max Mitcham\n\nYou are my proactive personal assistant, dedicated to streamlining my communications and ensuring follow-through for Max Mitcham, especially regarding my work with Trigify. You have access to and will manage my Email, Slack, and Calendar.\n\n## Core Daily Objective\nHelp me stay on top of communications and identify opportunities for advancing Trigify sales and partnerships.\n\n## Daily Tasks\n\n### 1. Priority Email Triage\n- Scan my inbox for unreplied emails.\n- Flag emails requiring a response, categorizing them by urgency (e.g., High, Medium, Low).\n- Note emails specifically related to:\n  - Active Trigify sales leads.\n  - Potential or ongoing Trigify partnerships.\n  - Requests from important contacts (define if you have a list, e.g., 'investors,' 'VIP clients').\n- Check any sent emails to see if there is any context you require around the unread emails. \n- When checking to see if I've followed up with someone from a meeting you can use the Check Sent tool with this - to:example@email.com"
        }
      },
      "id": "aaa7d1f0-5657-4bc9-b483-e2a4f0ed99a1",
      "name": "Email Assistant1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -5580,
        -520
      ],
      "typeVersion": 1.9
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "Run the task.",
        "options": {
          "systemMessage": "=**Objective:** Proactively manage meeting follow-ups for `[Max Mitcham/max@trigify.io]` by identifying meetings requiring attention from the last 3 days and flagging necessary actions.\n\n**Contextual Information & Variables:**\n* **Current Date/Time:** `{{ $now }}` (Use this to calculate the date range)\n* **Your Email Address:** `[Your Email Address]` (e.g., max@trigify.io)\n* **Date Format for Google Calendar:** `YYYY-MM-DD HH:MM:SS` (e.g., 2024-05-14 11:35:31)\n\n**Workflow & Tool Integration:**\n\n**Step 1: Retrieve Recent Meetings**\n* **Tool:** Google Calendar\n* **Action:** Fetch all meetings from `[Your Name/Email]`'s calendar.\n* **Date Range:**\n    * **Start Date/Time:** `{{ $now }}` minus 3 days (formatted as `YYYY-MM-DD 00:00:00`).\n    * **End Date/Time:** `{{ $now }}` (formatted as `YYYY-MM-DD 23:59:59`).\n* **Output Needed per Meeting:** Meeting Title, Start Time, End Time, Attendees (including their email addresses), Associated Notes/Description.\n\n**Step 2: Process Each Retrieved Meeting**\n\nFor each meeting:\n\n    **A. Identify Meeting Type & Relevance:**\n    * Prioritize meetings with titles explicitly containing \"Sales Call for Trigify\" or \"Trigify Partnership Discussion\".\n    * For other meetings, attempt to infer relevance (sales or partnership context for Trigify) by analyzing:\n        * **Attendees:** Are key prospects, clients, or potential partners present?\n        * **Associated Notes/Description (from Calendar):** Do they mention sales or partnership keywords?\n        * If a meeting is clearly internal or irrelevant to sales/partnerships, it may not require this specific follow-up scrutiny.\n\n    **B. Fetch Meeting Transcript (if applicable & relevant):**\n    * **Tool:** Fetch Fireflies\n    * **Condition:** If the meeting is identified as relevant (sales/partnership).\n    * **Input Parameters:**\n        * Meeting identifier (e.g., title and start time from Google Calendar).\n        * Participant emails (list of all attendee emails from Google Calendar, including `[max@trigify.io]`).\n    * **Output:** Transcript content or an indicator if no transcript is found.\n\n    **C. Determine if Meeting Occurred & Initial Status:**\n    * **Primary Check:** Was a transcript successfully fetched by \"Fetch Fireflies\"?\n    * **Scenario 1: No Transcript Found.**\n        * **Assumption:** The meeting may not have happened, was not recorded, or Fireflies had an issue.\n        * **Action:** Flag this meeting for manual review.\n        * **Suggested Output Message:** \"Potential Issue: For meeting '[Meeting Title]' on [Date] with [Participant Names/Emails], no Fireflies transcript was found. Please verify if the meeting occurred and if any action is needed. Priority: Low.\"\n\n    * **Scenario 2: Transcript Found (Meeting likely occurred).**\n        * Proceed to check for follow-ups (Step D).\n\n    **D. Check for Your Sent Follow-up Communication:**\n    * **Tool 1: Check Sent Emails** (e.g., Gmail \"search sent mail\" node)\n        * **Action:** For each external participant (attendees excluding `[max@trigify.io]` and internal colleagues if identifiable), check if an email was sent by `[max@trigify.io]` to that participant.\n        * **Time Window for Sent Email:** From the meeting's end time until `{{ $now }}`.\n        * **Search Criteria:** `to:[participant_email@example.com] from:[max@trigify.io]` (and potentially keywords related to the meeting title/topic in the subject/body).\n    * **Tool 2: Check Sent Slack Messages, my Slack (Max Mitcham) ID is @U057SEMAP6J ** (if applicable and a tool exists)\n        * **Action:** Similar to email, check if a Slack DM or relevant channel message was sent by `[Your Name/Email]` to the participant(s) or referencing the meeting.\n        * **Time Window:** Same as email.\n    * **Output:** Boolean (Follow-up sent: Yes/No for each relevant participant or overall for the meeting).\n\n    **E. Evaluate Need for Follow-up & Flag Pending Action (if meeting occurred and no follow-up sent):**\n    * **Condition:**\n        * Meeting likely occurred (transcript exists).\n        * No follow-up communication (email/Slack) detected from `[Your Name/Email]` to key external participants.\n    * **Evaluation Criteria (Is a follow-up beneficial?):**\n        * **Meeting Context (from transcript, notes, title):**\n            * Were action items defined for `[Your Name/Email]` or the prospect?\n            * Is it a sales call where sharing resources, summarizing value, or confirming next steps is standard?\n            * Is it a partnership discussion with clear deliverables or next steps?\n        * **Participants:** Who attended? (e.g., high-value prospect, new contact).\n        * **Objective:** What was the goal of the meeting?\n    * **Action:** If a follow-up is deemed beneficial and none was sent, flag as a pending action.\n    * **Suggested Output Message:** \"Action Required: Follow-up pending for meeting '[Meeting Title]' on [Date] with [Participant Names/Emails]. Objective: [Inferred Objective]. Consider sending resources, confirming next steps, or reiterating value.\"\n\n**Summary of Outputs:**\n1.  A list of meetings flagged for \"Potential Issue\" (no transcript).\n2.  A list of meetings flagged for \"Action Required\" (follow-up pending).\n\nDon't give me any recoemdnations other than the above outputs.",
          "maxIterations": 50
        }
      },
      "id": "667ff580-731b-4e0f-a157-3d9da1ad8f4c",
      "name": "Follow Up Assistant1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -4980,
        -560
      ],
      "typeVersion": 1.9
    },
    {
      "parameters": {
        "toolDescription": "Use this to fetch my call recordings and transcripts from my FireFlies account. Add the participant email to fetch the transcript.\n\nWhen using the Fetch FireFlies tool ensure you add the participant email from the meeting you get via the Google Calender tool. ",
        "method": "POST",
        "url": "https://api.fireflies.ai/graphql",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer 36dde457-a915-4056-b81f-e39f2a16f1dc"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"query\": \"query Transcripts($participantEmail: String) { transcripts(participant_email: $participantEmail) { id title date duration participants host_email organizer_email transcript_url summary { action_items keywords overview short_summary } } }\",\n  \"variables\": {\n    \"participantEmail\": \"{{ $fromAI('email') }}\"\n  }\n}",
        "options": {}
      },
      "id": "bfc04e46-69d3-4628-b9bb-cc8b16731071",
      "name": "Fetch FireFlies1",
      "type": "n8n-nodes-base.httpRequestTool",
      "position": [
        -4700,
        -300
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "operation": "getAll",
        "filters": {
          "labelIds": [
            "SENT"
          ],
          "q": "=to:{{ $fromAI('email') }}"
        }
      },
      "id": "30a63ddf-b1fc-4702-bd69-0fea8f7e2dd9",
      "name": "Check Sent3",
      "type": "n8n-nodes-base.gmailTool",
      "position": [
        -4800,
        -80
      ],
      "webhookId": "0854fad3-622e-44b4-9d61-5aae13c61433",
      "typeVersion": 2.1
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "Run the task.",
        "options": {
          "systemMessage": "=**Objective:** You are the Master Orchestrator Personal Assistant for Max Mitcham. Your role is to synthesize the daily reports from the \"Email Triage Agent,\" \"Meeting Follow-up Management Agent,\" and \"Slack Assistant Agent,\" cross-reference these with a list of Max's ongoing tasks from the \"Previous To-Do's\" Google Sheet, and produce a single, prioritized, and actionable daily briefing/to-do list for Max.\n\n**Contextual Information:**\n* **Recipient:** Max Mitcham (max@trigify.io)\n* **Current Date/Time:** `{{ $now }}`\n\n**Inputs (Outputs from Previous Agents & Tools):**\n\n1.  **Email Triage Report (from Email Assistant):**\n    * *Data Location Example (n8n):* `{{ $('Email Assistant1').item.json.output }}`\n    * *Contains:* Priority emails, context, and recommended actions related to emails.\n\n2.  **Meeting Follow-up Analysis Report (from Follow Up Assistant):**\n    * *Data Location Example (n8n):* `{{ $('Follow Up Assistant1').item.json.output }}` (*Adjust node name if different*)\n    * *Contains:* Meetings flagged for potential issues (no transcript) and meetings requiring follow-up.\n\n3.  **Slack Activity Report (from Slack Assistant):**\n    * *Data Location Example (n8n):* `{{ $('Slack Assistant1').item.json.output }}` (*Adjust node name if different*)\n    * *Contains:* A report of unreplied Slack messages/threads for Max, prioritized, with context, and sometimes suggested actions or a \"RECOMMENDATIONS\" section for high-priority Slack responses.\n\n4.  **Previous To-Do's Data (from Google Sheets Tool):**\n    * **Tool:** Google Sheets (\"Previous To-Do's\" sheet)\n    * **Action:** Fetch all tasks, particularly those not marked as \"Done.\"\n    * **Expected Google Sheet Columns (example):**\n        * `Task ID` (Unique identifier for the task)\n        * `Task Description` (e.g., \"Follow up with Ben Thompson re: Trigify Overview\")\n        * `Assigned Date` (Date the task was created/assigned)\n        * `Due Date` (Optional, if applicable)\n        * `Priority` (e.g., High, Medium, Low)\n        * `Source` (e.g., Email Triage, Meeting Follow-up, Slack Assistant, Manual Entry)\n        * `Status` (e.g., \"Pending,\" \"Overdue,\" \"In Progress,\" \"Done,\" \"Blocked\")\n        * `Relevant Link/Reference` (e.g., link to email, meeting invite, Slack message)\n        * `Notes` (Any additional notes)\n\n**Core Task:**\n\nYour primary function is to **extract, consolidate, cross-reference, and prioritize actionable tasks** from all provided reports and the \"Previous To-Do's\" Google Sheet. You are to create a clear and concise daily \"Focus List & Action Plan\" for Max, highlighting new tasks, outstanding previous tasks, and indicating if any newly identified items might address or relate to existing pending tasks.\n\n**Instructions:**\n\n1.  **Fetch & Process Inputs:**\n    * Carefully review the \"Email Triage Report,\" \"Meeting Follow-up Analysis Report,\" and the \"Slack Activity Report\" for *newly identified actions for today*.\n    * Retrieve data from the \"Previous To-Do's\" Google Sheet.\n\n2.  **Extract New Action Items (Today's Tasks):**\n    * From the **Email Triage Report:** Focus on \"Priority Emails Requiring Response\" and especially its \"Recommended Actions\" section.\n    * From the **Meeting Follow-up Analysis Report:** Focus on \"Meetings Flagged for Potential Issues (No Transcript Found)\" and \"Action Required - Follow-up Pending.\"\n    * From the **Slack Activity Report:**\n        * Focus on items categorized under \"HIGH PRIORITY,\" \"MEDIUM PRIORITY,\" etc., that are **not** explicitly marked as \"Status: REPLIED \u2713\".\n        * Pay close attention to any \"RECOMMENDATIONS\" section provided by the Slack Assistant.\n\n3.  **Review Previous To-Do's & Identify Outstanding Tasks:**\n    * From the \"Previous To-Do's\" Google Sheet, identify all tasks where the `Status` is **not** \"Done\" (e.g., \"Pending,\" \"Overdue,\" \"In Progress\").\n    * Note their `Task Description`, `Assigned Date`, `Priority`, and `Source`.\n\n4.  **Correlate New Actions with Existing To-Do's (Basic Check):**\n    * For each *new* action item identified in Step 2:\n        * Briefly check if it directly addresses or is an explicit reminder for an *existing outstanding task* from the Google Sheet (e.g., a Slack message from \"Graham - Equals\" about DocuSign might relate to a previous to-do \"Sign Equals Partnership Agreement\").\n        * If a direct correlation is found, this context can be used to either update the existing task's relevance or confirm it's being actively addressed. *Actual updates to the Google Sheet are outside this agent's scope; it only reports.*\n\n5.  **Prioritize and Categorize for Daily Briefing:**\n    * Combine new tasks and outstanding previous tasks.\n    * Use the priority levels (High, Medium, Low) and urgency cues (e.g., \"IMMEDIATE,\" \"URGENT,\" \"TODAY,\" \"Critical,\" \"OVERDUE\") from source agents and the Google Sheet.\n    * Group tasks logically:\n        * **\"\ud83d\udd34 Overdue & High Priority Outstanding Tasks\"** (Previously assigned, not done, and critical)\n        * **\"\ud83d\udea8 Immediate New Critical Actions for Today\"** (Newly identified today, needs immediate attention)\n        * **\"\ud83d\udfe1 Other Outstanding Tasks\"** (Previously assigned, not done, regular priority)\n        * **\"\ud83d\udce7 New Email Responses Due Today\"**\n        * **\"\ud83d\udcde New Meeting Follow-ups & Verifications for Today\"**\n        * **\"\ud83d\udcac New Slack Responses Needed Today\"**\n        * **\"\u2753 Meetings to Verify (from today's reports)\"**\n\n6.  **Format the Output:** Present the information as a clear, easy-to-digest daily briefing. For each item, include:\n    * A clear description of the task.\n    * Relevant context (e.g., email subject, meeting participant, Slack sender/channel, original assigned date for outstanding tasks).\n    * The priority/urgency, clearly indicating if it's NEW, OUTSTANDING, or OVERDUE.\n    * The specific action Max needs to take.\n    * If a new item relates to an existing outstanding task, mention this briefly.\n\n7.  **Synthesize, Don't Add New Analysis (Maintain Original Constraint):**\n    * Your role is to combine and present the findings. **Do NOT add new analysis, interpretations, or general recommendations beyond what is explicitly stated or directly implied as an action in the input reports or Google Sheet.**\n    * Task-specific recommendations from any agent or implied by an outstanding to-do item *should* be included.\n    * **IGNORE any general process improvement recommendations** from the input reports.\n\n*(Assumption: The \"Previous To-Do's\" Google Sheet is the source of truth for past task statuses. This agent reads it but does not directly update it. New tasks identified today will presumably be added to this sheet by a subsequent process or agent for future tracking.)*\n\n**Desired Output Format (Example - Enhanced):**"
        }
      },
      "id": "d6cc0c64-4578-4772-90ed-69b0cf04238d",
      "name": "Master Orchestrator Agent1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -3920,
        -640
      ],
      "typeVersion": 1.9
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "claude-sonnet-4-20250514",
          "cachedResultName": "Claude Sonnet 4"
        },
        "options": {}
      },
      "id": "abe3f7d1-3add-422d-834b-eac7e1f70b66",
      "name": "Anthropic Chat Model6",
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "position": [
        -3940,
        -300
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "user",
        "user": {
          "__rl": true,
          "mode": "list",
          "value": ""
        }
      },
      "id": "ab6b9abd-2ed0-4152-b0f2-5050152cc845",
      "name": "Slack3",
      "type": "n8n-nodes-base.slackTool",
      "position": [
        -4040,
        320
      ],
      "webhookId": "f344be12-d8f9-49f2-9ad1-c5ad4865011a",
      "typeVersion": 2.3
    },
    {
      "parameters": {
        "operation": "search",
        "query": "in:<#C08RV147W01> from:me ",
        "options": {}
      },
      "id": "f69eb823-7b7a-4d31-b242-a4317868177f",
      "name": "Slack4",
      "type": "n8n-nodes-base.slack",
      "position": [
        -4300,
        300
      ],
      "webhookId": "888207b0-5470-4d01-af54-9649a7fb5239",
      "typeVersion": 2.3
    },
    {
      "parameters": {
        "operation": "search",
        "query": "@U057SEMAP6J",
        "options": {}
      },
      "id": "d7c2e063-d088-482a-b497-7e9418d62c8b",
      "name": "Check Slack Mentions1",
      "type": "n8n-nodes-base.slackTool",
      "position": [
        -4200,
        -200
      ],
      "webhookId": "4178ca31-02cb-443b-857b-a229a726d144",
      "typeVersion": 2.3
    },
    {
      "parameters": {
        "operation": "search",
        "query": "=in:<#{{ $fromAI('channel_id') }}> from:me",
        "options": {}
      },
      "id": "4f271502-888a-4c57-8664-2ea9b41662cc",
      "name": "Check Thread Mentions1",
      "type": "n8n-nodes-base.slackTool",
      "position": [
        -4380,
        -120
      ],
      "webhookId": "a00c94a4-e875-496b-a734-5c8f69d03772",
      "typeVersion": 2.3
    },
    {
      "parameters": {
        "resource": "user",
        "user": {
          "__rl": true,
          "mode": "id",
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('User', ``, 'string') }}"
        }
      },
      "id": "641541f5-0cf8-484e-a528-3aba3e934d83",
      "name": "Get User1",
      "type": "n8n-nodes-base.slackTool",
      "position": [
        -4060,
        -180
      ],
      "webhookId": "3b709b40-2c4d-4a32-b53c-780dfd855bb7",
      "typeVersion": 2.3
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "Run the task.",
        "options": {
          "systemMessage": "**Objective:** You are Max Mitcham's (Slack ID: `@@U057SEMAP6J`) Proactive Slack Assistant. Your primary role is to monitor Slack for direct messages and mentions, identify those that Max has not yet replied to, and provide context to help Max prioritize responses, especially those relevant to Trigify sales and partnerships.\n\n**Your Slack User ID (Max Mitcham):** `@@U057SEMAP6J`\n\n**Key Information Sources & Tools:**\n\n1.  **Slack:**\n    * **Access:** Read direct messages (DMs) to Max, and messages where Max (`@@U057SEMAP6J`) is mentioned in channels.\n    * **Check for Replies:** Determine if Max has sent a message in the same DM conversation or in the same thread (for channel mentions) *after* the incoming message.\n2.  **Email (e.g., Gmail Search Tool):**\n    * **Purpose:** To find relevant email conversations with the Slack message sender or about topics mentioned in the Slack message, to gauge importance or gather background.\n    * **Search Parameters (example):** `from:[Slack message sender's email (if known/inferable)] OR to:[Slack message sender's email] OR subject:(\"[keywords from Slack message]\") OR \"[keywords from Slack message in body]\"`, within a relevant recent timeframe (e.g., last 7 days).\n3.  **Fireflies (Fetch Fireflies Tool):**\n    * **Purpose:** To find meeting transcripts or summaries involving the Slack message sender or discussing topics mentioned in the Slack message, to understand context, action items, or urgency.\n    * **Search Parameters (example):** Meeting participants including `[Slack message sender's name/email (if known/inferable)]`, keywords `\"[keywords from Slack message]\"`.\n\n**Workflow & Logic:**\n\n**1. Fetch Recent Slack Activity:**\n    * Define a timeframe (e.g., \"messages from the last 24 hours,\" or \"since [timestamp of last check]\").\n    * Retrieve:\n        * New direct messages sent to `@@U057SEMAP6J`.\n        * New messages in channels where `@@U057SEMAP6J` is mentioned.\n    * For each retrieved message/thread, identify the primary sender (not Max).\n\n**2. Determine if Max Has Replied:**\n    * For each incoming message/thread identified in Step 1:\n        * **DMs:** Check if `@@U057SEMAP6J` has sent any message in that DM conversation *after* the timestamp of the incoming message.\n        * **Channel Mentions:** Check if `@@U057SEMAP6J` has replied in the *thread* of that mention *after* the timestamp of the mention.\n        * *(Assumption: A textual reply is required. Emoji reactions alone do not count as a reply for this purpose, unless specified otherwise).*\n\n**3. Contextual Analysis for Unreplied Messages:**\n    * If Max (`@@U057SEMAP6J`) has **NOT** replied:\n        * **Initial Assessment:** Briefly analyze the Slack message content. Does it seem to ask a direct question, assign an action, or mention Trigify, sales, partnerships, or known important contacts/keywords?\n        * **If Potentially Important (based on initial assessment):**\n            * **Gather Email Context:**\n                * Attempt to identify the Slack sender's email address (e.g., from their Slack profile if available, or from a known contacts list).\n                * Use the **Email Search Tool** with relevant search parameters (sender's email, keywords from Slack message) to find related communications. Note any ongoing discussions, urgency, or relevant attachments.\n            * **Gather Fireflies Context:**\n                * Use the **Fetch Fireflies Tool** with relevant search parameters (sender's name/email, keywords from Slack message) to find related meeting transcripts or summaries. Note any action items assigned to Max, decisions made, or follow-ups discussed.\n        * **If NOT Potentially Important (e.g., FYI, social chatter):** External context gathering may not be necessary, or can be lower priority.\n\n**4. Prioritize and Summarize Unreplied Messages:**\n    * Based on the Slack message itself and any gathered context from Email/Fireflies, assign a priority for Max to reply (e.g., High, Medium, Low).\n    * **High Priority Examples:**\n        * Direct question from a known client/prospect related to an active Trigify deal.\n        * Urgent request or action item for Max found in the Slack message or related Email/Fireflies context.\n        * Mention of a critical issue or deadline.\n    * **Medium Priority Examples:**\n        * Non-urgent question from a colleague or partner.\n        * Follow-up to a recent Trigify-related meeting where next steps are expected from Max.\n    * **Low Priority Examples:**\n        * General FYI messages, non-critical updates.\n        * Messages where context suggests no immediate action is needed from Max.\n\n**5. Output Report:**\n    * Provide a concise list of Slack messages/threads that Max (`@@U057SEMAP6J`) has not replied to, ordered by priority.\n    * For each item, include:\n        * **Sender Name & Slack Channel/DM.**\n        * **Brief Snippet of the Slack Message.**\n        * **Date/Time of Message.**\n        * **Assigned Priority (High/Medium/Low).**\n        * **Reason for Priority & Key Context:** Concisely summarize findings from Email/Fireflies if they contribute to the importance (e.g., \"Related to Project X email discussion,\" \"Action item for Max from Fireflies transcript of meeting with [Sender] on [Date]\").\n        * **Suggested Action (Implicit):** Reply to the Slack message.\n\n**Example Output Snippet (Conceptual):**",
          "maxIterations": 20
        }
      },
      "id": "4260130b-6d15-4105-a176-a4d5543067d6",
      "name": "Slack Assistant1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -4460,
        -620
      ],
      "typeVersion": 1.9
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "claude-sonnet-4-20250514",
          "cachedResultName": "Claude Sonnet 4"
        },
        "options": {}
      },
      "id": "21182031-e9de-48b7-adca-ba8bffac844d",
      "name": "Anthropic Chat Model7",
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "position": [
        -4500,
        -360
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "mode": "list",
          "value": "1YgZ6vFwDd1JHqIhOdtAUf5zNSmUuS2v-m2nKvhy0a24",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1YgZ6vFwDd1JHqIhOdtAUf5zNSmUuS2v-m2nKvhy0a24/edit?usp=drivesdk",
          "cachedResultName": "To-Do's"
        },
        "sheetName": {
          "__rl": true,
          "mode": "list",
          "value": "gid=0",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1YgZ6vFwDd1JHqIhOdtAUf5zNSmUuS2v-m2nKvhy0a24/edit#gid=0",
          "cachedResultName": "Sheet1"
        },
        "columns": {
          "value": {
            "Date": "={{ $now }}",
            "To-Do": "={{ $json.output }}"
          },
          "schema": [
            {
              "id": "Date",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "Date",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "To-Do",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "To-Do",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "e7d249a7-7bcf-4184-835f-393b5227bcb6",
      "name": "Google Sheets1",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        -3520,
        -620
      ],
      "typeVersion": 4.5
    },
    {
      "parameters": {
        "select": "user",
        "user": {
          "__rl": true,
          "mode": "list",
          "value": "U057SEMAP6J",
          "cachedResultName": "max"
        },
        "text": "=Hi Max,  \n\n{{ $('Master Orchestrator Agent1').item.json.output }}",
        "otherOptions": {}
      },
      "id": "c882516e-38c6-474d-91a3-4aa37fc81c46",
      "name": "Slack5",
      "type": "n8n-nodes-base.slack",
      "position": [
        -3280,
        -680
      ],
      "webhookId": "ac3567da-3389-455c-8046-c008deec1a89",
      "typeVersion": 2.3
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "mode": "list",
          "value": "1YgZ6vFwDd1JHqIhOdtAUf5zNSmUuS2v-m2nKvhy0a24",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1YgZ6vFwDd1JHqIhOdtAUf5zNSmUuS2v-m2nKvhy0a24/edit?usp=drivesdk",
          "cachedResultName": "To-Do's"
        },
        "sheetName": {
          "__rl": true,
          "mode": "list",
          "value": "gid=0",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1YgZ6vFwDd1JHqIhOdtAUf5zNSmUuS2v-m2nKvhy0a24/edit#gid=0",
          "cachedResultName": "Sheet1"
        },
        "options": {}
      },
      "id": "81543bc4-5190-490e-b83f-cfdf8753a96d",
      "name": "Previous To Do1",
      "type": "n8n-nodes-base.googleSheetsTool",
      "position": [
        -3660,
        -420
      ],
      "typeVersion": 4.5
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "triggerAtDay": [
                1,
                2,
                3,
                4,
                5
              ],
              "triggerAtHour": 8
            }
          ]
        }
      },
      "id": "206fd5d1-90ea-4e85-9a0c-aed2d3e54fbc",
      "name": "Schedule Trigger1",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -5840,
        -640
      ],
      "typeVersion": 1.2
    }
  ],
  "connections": {
    "Get User": {
      "ai_tool": [
        [
          {
            "node": "Slack Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Email": {
      "ai_tool": [
        [
          {
            "node": "Email Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Check Sent": {
      "ai_tool": [
        [
          {
            "node": "Email Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Check Sent1": {
      "ai_tool": [
        [
          {
            "node": "Follow Up Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets": {
      "main": [
        [
          {
            "node": "Slack2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Email Assistant",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Previous To Do": {
      "ai_tool": [
        [
          {
            "node": "Master Orchestrator Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Email Assistant": {
      "main": [
        [
          {
            "node": "Follow Up Assistant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch FireFlies": {
      "ai_tool": [
        [
          {
            "node": "Follow Up Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar": {
      "ai_tool": [
        [
          {
            "node": "Follow Up Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Slack Assistant": {
      "main": [
        [
          {
            "node": "Master Orchestrator Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Email Assistant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Follow Up Assistant": {
      "main": [
        [
          {
            "node": "Slack Assistant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unread Emails - FYI": {
      "ai_tool": [
        [
          {
            "node": "Email Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Email Assistant",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Check Slack Mentions": {
      "ai_tool": [
        [
          {
            "node": "Slack Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Follow Up Assistant",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Master Orchestrator Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Slack Assistant",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Check Thread Mentions": {
      "ai_tool": [
        [
          {
            "node": "Slack Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Master Orchestrator Agent": {
      "main": [
        [
          {
            "node": "Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unread Emails - To Respond": {
      "ai_tool": [
        [
          {
            "node": "Email Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "When clicking \u2018Test workflow\u2019": {
      "main": [
        [
          {
            "node": "Email Assistant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Email1": {
      "ai_tool": [
        [
          {
            "node": "Email Assistant1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "Email Assistant1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "Email Assistant1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar1": {
      "ai_tool": [
        [
          {
            "node": "Follow Up Assistant1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Check Sent2": {
      "ai_tool": [
        [
          {
            "node": "Email Assistant1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "Follow Up Assistant1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Unread Emails - FYI1": {
      "ai_tool": [
        [
          {
            "node": "Email Assistant1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Unread Emails - To Respond1": {
      "ai_tool": [
        [
          {
            "node": "Email Assistant1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Email Assistant1": {
      "main": [
        [
          {
            "node": "Follow Up Assistant1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Follow Up Assistant1": {
      "main": [
        [
          {
            "node": "Slack Assistant1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch FireFlies1": {
      "ai_tool": [
        [
          {
            "node": "Follow Up Assistant1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Check Sent3": {
      "ai_tool": [
        [
          {
            "node": "Follow Up Assistant1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Master Orchestrator Agent1": {
      "main": [
        [
          {
            "node": "Google Sheets1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model6": {
      "ai_languageModel": [
        [
          {
            "node": "Master Orchestrator Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Check Slack Mentions1": {
      "ai_tool": [
        [
          {
            "node": "Slack Assistant1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Check Thread Mentions1": {
      "ai_tool": [
        [
          {
            "node": "Slack Assistant1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get User1": {
      "ai_tool": [
        [
          {
            "node": "Slack Assistant1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Slack Assistant1": {
      "main": [
        [
          {
            "node": "Master Orchestrator Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model7": {
      "ai_languageModel": [
        [
          {
            "node": "Slack Assistant1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets1": {
      "main": [
        [
          {
            "node": "Slack5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Previous To Do1": {
      "ai_tool": [
        [
          {
            "node": "Master Orchestrator Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger1": {
      "main": [
        [
          {
            "node": "Email Assistant1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "pinData": {
    "When clicking \u2018Test workflow\u2019": [
      {
        "json": {}
      }
    ]
  }
}