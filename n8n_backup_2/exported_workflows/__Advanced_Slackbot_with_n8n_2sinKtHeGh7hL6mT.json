{
  "id": "2sinKtHeGh7hL6mT",
  "name": "\ud83e\udd16 Advanced Slackbot with n8n",
  "nodes": [
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $json.alerts_channel }}"
        },
        "text": "=\ud83e\uddf5 Got request to `{{ $json.command }}` from @{{$json.user}}",
        "otherOptions": {
          "link_names": true
        }
      },
      "id": "1ea2f398-f77a-445c-a974-1e918796acc4",
      "name": "Start thread",
      "type": "n8n-nodes-base.slack",
      "position": [
        1460,
        280
      ],
      "typeVersion": 2,
      "webhookId": "7ac2d4a0-cae7-421c-b2fc-a723a7423061"
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "={{ $json.response_url }}",
        "responseFormat": "string",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={\n\"attachments\": [\n{\n\"text\": \"\u2139\ufe0f <{{ $json.help_docs_url }}|You can find help page here>\"\n}\n]\n}"
      },
      "id": "3f2c145b-d24a-494b-a7f2-d5e25271c4ce",
      "name": "send help",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1080,
        660
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.slack_token }}",
              "value2": "={{ $json.request_token }}"
            }
          ]
        }
      },
      "id": "8d589a11-8086-45e3-85e3-fb491d156b87",
      "name": "Validate Slack token",
      "type": "n8n-nodes-base.if",
      "position": [
        520,
        380
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## \ud83d\udc68\u200d\ud83c\udfa4 Setup\n1. Add Slack command and point it up to the webhook\n2. Add the following to the **Set config** node\n- `alerts_channel` with alerts channel to start threads on\n- `instance_url` with this instance url to make it easy to debug\n- `slack_token` with slack bot token to validate request\n- `slack_secret_signature` with slack secret signature to validate request\n- `help_docs_url` with help url to help users understand the commands \n3. Build other workflows to call and add them to `commands` in **Set Config**. Each command must be mapped to a workflow id with an `Execute Workflow Trigger` node\n4. Activate workflow \ud83d\ude80",
        "height": 326.46772464213774,
        "width": 549.1826144791862,
        "color": 5
      },
      "id": "3d288c74-fa95-49f9-ae34-206c69a67efa",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -240,
        -40
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "={{ $json.response_url }}",
        "responseFormat": "string",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={\n\"attachments\": [\n{\n\"text\": \"\u2139\ufe0f Got command `{{ $json.command_name }} {{ $json.command_text }}`\"\n}\n]\n}"
      },
      "id": "753ab339-5dfd-470e-bc44-de40591ca107",
      "name": "Reply to user that command was received",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        700,
        140
      ],
      "typeVersion": 1,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "d0a35e4f-3141-4e94-bb1a-fe7747a58dfc",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              },
              "leftValue": "={{ $json.workflow }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "878dd630-1417-4b8b-97f3-baed6ca8c145",
      "name": "if has workflow",
      "type": "n8n-nodes-base.if",
      "position": [
        940,
        380
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ba8fd958-188a-4e27-bdf1-928de8ae7d4f",
              "name": "commands",
              "type": "object",
              "value": "={{\n{\n  \"info\": { workflowId: 142, startThread: false },\n  \"delete-user\": { workflowId: \"pTh9HMZVYcQNXypJ\" }\n}\n}}"
            },
            {
              "id": "105d2881-72b7-4547-a076-83ddb0966256",
              "name": "alerts_channel",
              "type": "string",
              "value": "#adore_bot_test"
            },
            {
              "id": "9672bea2-3a6a-4162-9966-107bf2ddbee5",
              "name": "instance_url",
              "type": "string",
              "value": "https://x.app.n8n.cloud/"
            },
            {
              "id": "52b53b37-5f69-4fb8-9569-f62788d91af1",
              "name": "slack_token",
              "type": "string",
              "value": "FILL_TOKEN_HERE"
            },
            {
              "id": "4d8d06f2-f1a5-4eb2-a559-42d98ceddffb",
              "name": "slack_secret_signature",
              "type": "string",
              "value": "FILL_SECRET_HERE"
            },
            {
              "id": "c2c7de20-a264-495e-934e-dda1a0bc64b9",
              "name": "help_docs_url",
              "type": "string",
              "value": "ADD_LINK_HERE"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "cb15d7f8-0c7d-43bf-b751-4f40c9b4df4f",
      "name": "Set config",
      "type": "n8n-nodes-base.set",
      "position": [
        100,
        380
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "={{ $json.response_url }}",
        "responseFormat": "string",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={\n\"attachments\": [\n{\n\"text\": \"<{{ $json.instance_url }}/workflow/{{ $workflow.id }}/executions/{{ $execution.id }}|To debug entry point execution>\"\n}\n]\n}"
      },
      "id": "ee5d3e2a-f811-48cb-8c1a-4283da7bae5f",
      "name": "Send debug url",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1460,
        540
      ],
      "retryOnFail": false,
      "typeVersion": 2,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "or",
          "conditions": [
            {
              "id": "7eadbf0d-f8ec-45cf-abf3-aafb8d7e16b4",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              },
              "leftValue": "={{ $json.workflow.startThread }}",
              "rightValue": ""
            },
            {
              "id": "2f28e7dd-6473-4f85-a449-674e00b29b4d",
              "operator": {
                "type": "boolean",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.workflow.startThread }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "79e9af07-2df1-45a0-a030-9796cb99ec4d",
      "name": "if create thread",
      "type": "n8n-nodes-base.if",
      "position": [
        1180,
        380
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "={{ $json.response_url }}",
        "responseFormat": "string",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={\n\"attachments\": [\n{\n\"text\": \"\ud83e\uddf5 Thread created on {{ $json.alerts_channel }}\"\n}\n]\n}"
      },
      "id": "35cad838-0b4b-4289-97b9-872e3a657945",
      "name": "Alert user that thread was created",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1460,
        100
      ],
      "retryOnFail": false,
      "typeVersion": 2,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $json.channel }}"
        },
        "text": "=<{{ $vars.instance_url }}/workflow/{{ $workflow.id }}/executions/{{ $execution.id }}|To debug entry point execution>",
        "otherOptions": {
          "thread_ts": {
            "replyValues": {
              "thread_ts": "={{ $json.message.ts }}"
            }
          }
        }
      },
      "id": "e57535f8-39ec-486b-9703-b55d997c89f4",
      "name": "Add debug info",
      "type": "n8n-nodes-base.slack",
      "position": [
        1740,
        160
      ],
      "typeVersion": 2,
      "webhookId": "537901ac-27b6-456b-a536-7f945fbc95bd"
    },
    {
      "parameters": {
        "workflowId": "={{ $json.commands.info.workflowId }}",
        "options": {}
      },
      "id": "0e8d41b6-c53b-4cdd-9945-ea04dbfa9a7c",
      "name": "Execute target workflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        2140,
        600
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "293771ec-f2b8-4b3a-abcf-b523feba0e32",
      "name": "Add thread info",
      "type": "n8n-nodes-base.merge",
      "position": [
        1960,
        420
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.command }}",
                    "rightValue": "help"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "help"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "7a3de7c4-37cc-4696-acf9-564ffc43cbfb",
      "name": "Handle other commands",
      "type": "n8n-nodes-base.switch",
      "position": [
        840,
        720
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "channel_id",
              "value": "={{ $json.channel }}"
            },
            {
              "name": "thread_ts",
              "value": "={{ $json.message.ts }}"
            }
          ]
        },
        "options": {}
      },
      "id": "e85a900e-b488-4a30-9935-44ebfdf4f906",
      "name": "Set thread info",
      "type": "n8n-nodes-base.set",
      "position": [
        1740,
        340
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "={{ $json.response_url }}",
        "responseFormat": "string",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={\n\"attachments\": [\n{\n\"text\": \"\ud83e\udd37\ud83c\udffd\u200d\u2642\ufe0f Sorry, unknown command `{{ $json.command }}`\"\n}\n]\n}"
      },
      "id": "cf0c69eb-1e3f-4b39-85c2-f8f50889339f",
      "name": "Unknown command",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1080,
        840
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8fa0d712-1076-49b7-82da-e98390182ac6",
              "name": "command_text",
              "type": "string",
              "value": "={{ $json.body.text }}"
            },
            {
              "id": "ef82aa1f-2882-4970-b10a-86e7faef6562",
              "name": "user",
              "type": "string",
              "value": "={{ $json.body.user_name }}"
            },
            {
              "id": "633fe37e-850c-4e95-8728-f19ceb4afe76",
              "name": "response_url",
              "type": "string",
              "value": "={{ $json.body.response_url }}"
            },
            {
              "id": "bbab2bb9-3e90-41c4-b5be-8c7873c61707",
              "name": "request_token",
              "type": "string",
              "value": "={{ $json.body.token }}"
            },
            {
              "id": "3e6dd0e2-fec4-48cb-a44c-1342a8eb619c",
              "name": "command_name",
              "type": "string",
              "value": "={{ $json.body.command }}"
            }
          ]
        },
        "options": {}
      },
      "id": "edd3511e-976d-4ef8-8c8a-b95f46907210",
      "name": "Set vars",
      "type": "n8n-nodes-base.set",
      "position": [
        -80,
        380
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "a14585bb-b757-410e-a5b2-5f05a087b388",
        "options": {
          "binaryPropertyName": "data",
          "rawBody": true,
          "responseData": "Wait for it..."
        }
      },
      "id": "8e544eca-1aa8-4134-bb47-8bcf6efacc4b",
      "name": "Webhook to call for Slack command",
      "type": "n8n-nodes-base.webhook",
      "position": [
        -280,
        380
      ],
      "webhookId": "a14585bb-b757-410e-a5b2-5f05a087b388",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "={{ $json.response_url }}",
        "responseFormat": "string",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={\n\"attachments\": [\n{\n\"text\": \"<{{ $json.instance_url }}workflow/{{ $workflow.id }}/executions/{{ $execution.id }}|To debug subworkflow execution>\"\n}\n]\n}"
      },
      "id": "2a62b46d-a021-40ee-97a6-8c6062814db4",
      "name": "Reply to user directly",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1660,
        1000
      ],
      "typeVersion": 2,
      "continueOnFail": true
    },
    {
      "parameters": {
        "content": "## Example subworkflow for command WITHOUT Slack thread..\n\n### Build this in a separate workflow\n### and add the id to `commands` in **Set Config**",
        "height": 655.2393233866135,
        "width": 1255.4495374151727
      },
      "id": "c58185bc-569e-41fa-a687-d764bfa514d2",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1360,
        760
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "4fc65d8d-f67a-4758-b332-80c5b8c18c62",
      "name": "Command workflow trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        1420,
        1120
      ],
      "typeVersion": 1,
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "d8478e87-6e7c-40ea-a28d-099a3896001b",
              "operator": {
                "type": "array",
                "operation": "contains",
                "rightType": "any"
              },
              "leftValue": "={{ $json.flags }}",
              "rightValue": "--full-info"
            }
          ]
        },
        "options": {}
      },
      "id": "578c70e9-14d1-4a8b-8c64-c1f1f0f741c2",
      "name": "if has flag",
      "type": "n8n-nodes-base.if",
      "position": [
        1600,
        1220
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "1ccb9f5d-0e7d-44f9-86e3-d5c0e15cb648",
              "operator": {
                "name": "filter.operator.equals",
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "={{ $json.env.env }}",
              "rightValue": "prod"
            }
          ]
        },
        "options": {}
      },
      "id": "365eaa2d-f4cd-446e-b396-1f50b20940e2",
      "name": "If matches env variable",
      "type": "n8n-nodes-base.if",
      "position": [
        1820,
        1220
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "={{ $('Command workflow trigger').item.json.response_url }}",
        "responseFormat": "string",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{ $json.slack_message }}"
      },
      "id": "70528d7d-4dec-47a7-97ac-f886b9024309",
      "name": "Found user",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2420,
        1220
      ],
      "typeVersion": 2,
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "const user = {\n  id: '1',\n  email: 'mutasem@n8n.io',\n  name: 'Mutasem Aldmour',\n  username: 'mutasem',\n  profile_url: 'https://n8n.io/creators/mutasem/',\n}\n\nconst fields = [\n    `*id:*\\n${user.id}`,\n    `*email:*\\n${user.email}`,\n    `*name:*\\n${user.name}`,\n    `*urls:*\\n<${user.profile_url}|creator profile>`\n];\n\n// remember no more than 10 fields per section\nconst output = {\n    \"blocks\":\n    [\n        {\n            \"type\": \"section\",\n            \"text\":\n            {\n                \"type\": \"mrkdwn\",\n                \"text\": `User: *${user.username}*`\n            }\n        },\n        {\n            \"type\": \"section\",\n            \"fields\": fields.map((text) => {\n                    return {\n                        \"type\": \"mrkdwn\",\n                        text,\n                    };\n                })\n        }\n    ]\n}\n\nreturn { slack_message: output };"
      },
      "id": "44d0eb2f-9384-4070-81e7-511e95d74f6a",
      "name": "Format data into nice structure",
      "type": "n8n-nodes-base.code",
      "position": [
        2240,
        1220
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "4b2c293f-d172-4879-9ffa-060b81c59de4",
      "name": "REPLACE ME WITH TRIGGER",
      "type": "n8n-nodes-base.set",
      "position": [
        1440,
        1780
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "operation": "deleteTable",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "mode": "name",
          "value": "=user"
        },
        "deleteCommand": "delete",
        "where": {
          "values": [
            {
              "column": "username",
              "value": "={{ $json.params[0] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "a580c7c7-a3d0-4a56-92ce-6efe9708e452",
      "name": "Delete user here for example",
      "type": "n8n-nodes-base.postgres",
      "position": [
        1700,
        1900
      ],
      "typeVersion": 2.3,
      "disabled": true
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "mode": "name",
          "value": "test"
        },
        "where": {
          "values": [
            {
              "column": "username",
              "value": "={{ $json.params[0] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "3559b5b4-60a0-4dc4-9a07-87d2f3688295",
      "name": "Get user here for example",
      "type": "n8n-nodes-base.postgres",
      "position": [
        2040,
        1220
      ],
      "typeVersion": 2.3,
      "disabled": true
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $('Command workflow trigger').item.json.channel_id }}"
        },
        "text": "Deleted user  \u2705",
        "otherOptions": {
          "thread_ts": {
            "replyValues": {
              "thread_ts": "={{ $('Command workflow trigger').item.json.thread_ts }}"
            }
          }
        }
      },
      "id": "4c967d96-3796-4e02-880f-321c7f935010",
      "name": "Confirm user was deleted",
      "type": "n8n-nodes-base.slack",
      "position": [
        1920,
        1900
      ],
      "typeVersion": 2,
      "webhookId": "65507ad5-3363-47f8-a176-2f6150e38e55"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $json.channel_id }}"
        },
        "text": "=<{{ $json.instance_url }}workflow/{{ $workflow.id }}/executions/{{ $execution.id }}|To debug subworkflow execution>",
        "otherOptions": {
          "thread_ts": {
            "replyValues": {
              "thread_ts": "={{ $json.thread_ts }}"
            }
          }
        }
      },
      "id": "79caf9c8-ba44-4b5b-a598-00df3c9bdcf9",
      "name": "Replying to thread",
      "type": "n8n-nodes-base.slack",
      "position": [
        1700,
        1680
      ],
      "typeVersion": 2,
      "webhookId": "2238a8ab-bfde-4049-bad6-ea3684fb6987"
    },
    {
      "parameters": {
        "content": "## Example subworkflow for command WITH Slack thread..\n\n### Build this in a second separate workflow\n### and add the id to `commands` in **Set Config**\n\nUsed Edit Fields node here as trigger because you can only have one\nExecute Workflow Trigger per workflow",
        "height": 589.0078772779973,
        "width": 961.7738517807816
      },
      "id": "fa2b0fe2-1a0e-4143-81c3-7080879f2810",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1360,
        1480
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "### \ud83d\udc46\ud83c\udffd Set all custom config here ",
        "height": 83.26656725254155,
        "width": 150,
        "color": 7
      },
      "id": "45db6504-f53a-4ddd-aece-73eae2f20619",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        120,
        560
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "const text = $input.first().json.command_text;\nconst parts = text.split(' ');\n\n\n// GET COMMAND\n// for example /cloudbot info mutasem\n// should return \"info\"\nconst command = parts[0];\n\n\n// GET FLAGS \n// for example /cloudbot info mutasem --test --flag\n// should return ['--test', '--flag']\nconst flags = parts.filter((part) => part.startsWith('--'));\n\n\n// GET PARAMS\n// for example /cloudbot info mutasem test\n// should return [\"mutasem\", \"test\"]\nlet params = parts\n  .filter((part, i) => i > 0 && !part.startsWith('--'));\nparams = params.filter((param, i) => {\n  if (param === '-e') {\n    return false;\n  }\n  if (params[i - 1] === '-e') {\n    return false;\n  }\n\n  return true;\n});\n\n\n// GET ENV VARS\n// for example /cloudbot info mutasem -e env=prod\n// should return {env: \"prod\"}\nconst env = parts.filter((val, i) => {\n  return i > 0 && parts[i - 1] === '-e';\n})\n  .reduce((accu, opt) => {\n  if (!opt.includes('=')) {\n    return accu;\n  }\n\n  const key = opt.split('=')[0];\n  const val = opt.split('=')[1];\n  \n  accu[key] = clean(val);\n  return accu;\n}, {});\n\n// Add workflow to run\nconst commands = $input.first().json.commands;\nlet workflow;\nif (commands[command]) {\n  workflow = commands[command];\n}\n\nreturn {\n  ...$input.first().json,\n  command,\n  flags,\n  env,\n  params,\n  workflow,\n}\n\nfunction clean(str) {\n  return str.replaceAll(`\u2018`, '\\'').replaceAll('\u201c', '\"').replaceAll('\u201d', '\"').replaceAll('\u2019', '\\'');\n}"
      },
      "id": "d60c7d78-69dc-4a18-9f9b-b4b3f4c862e0",
      "name": "parse command",
      "type": "n8n-nodes-base.code",
      "position": [
        760,
        380
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "const SIGNING_SECRET = $input.first().json.slack_secret_signature;\nconst item = $('Webhook to call for Slack command').first();\n\nif (!item.binary) {\n  throw new Error('Missing binary data');\n}\n\nconst crypto = require('crypto');\nconst { binary: { data } } = item;\n\nif (\n  !item.json.headers['x-slack-request-timestamp'] ||\n  Math.abs(\n    Math.floor(new Date().getTime() / 1000) -\n      +item.json.headers['x-slack-request-timestamp']\n  ) > 300\n) {\n  throw new Error('Unauthorized, request not fresh');\n}\n\nconst rawBody = Buffer.from(data.data, 'base64').toString()\n\n// compute the basestring\nconst baseStr = `v0:${item.json.headers['x-slack-request-timestamp']}:${rawBody}`;\n\n// extract the received signature from the request headers\nconst receivedSignature = item.json.headers['x-slack-signature'];\n\nconst expectedSignature = `v0=${crypto.createHmac('sha256', SIGNING_SECRET)\n.update(baseStr, 'utf8')\n.digest('hex')}`;\n\n// match the two signatures\nif (expectedSignature !== receivedSignature) {\nthrow new Error('Unauthorized, umatched signatures');\n}\n\nreturn $input.all();"
      },
      "id": "87a5c4df-0a51-499f-a41a-d1f947a3dc28",
      "name": "Validate webhook signature",
      "type": "n8n-nodes-base.code",
      "position": [
        300,
        380
      ],
      "typeVersion": 2
    }
  ],
  "connections": {
    "Set vars": {
      "main": [
        [
          {
            "node": "Set config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set config": {
      "main": [
        [
          {
            "node": "Validate webhook signature",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "if has flag": {
      "main": [
        [
          {
            "node": "If matches env variable",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start thread": {
      "main": [
        [
          {
            "node": "Add debug info",
            "type": "main",
            "index": 0
          },
          {
            "node": "Set thread info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "parse command": {
      "main": [
        [
          {
            "node": "if has workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add thread info": {
      "main": [
        [
          {
            "node": "Execute target workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set thread info": {
      "main": [
        [
          {
            "node": "Add thread info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "if has workflow": {
      "main": [
        [
          {
            "node": "if create thread",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle other commands",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "if create thread": {
      "main": [
        [
          {
            "node": "Start thread",
            "type": "main",
            "index": 0
          },
          {
            "node": "Alert user that thread was created",
            "type": "main",
            "index": 0
          },
          {
            "node": "Add thread info",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Send debug url",
            "type": "main",
            "index": 0
          },
          {
            "node": "Execute target workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Slack token": {
      "main": [
        [
          {
            "node": "Reply to user that command was received",
            "type": "main",
            "index": 0
          },
          {
            "node": "parse command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle other commands": {
      "main": [
        [
          {
            "node": "send help",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Unknown command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If matches env variable": {
      "main": [
        [
          {
            "node": "Get user here for example",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "REPLACE ME WITH TRIGGER": {
      "main": [
        [
          {
            "node": "Replying to thread",
            "type": "main",
            "index": 0
          },
          {
            "node": "Delete user here for example",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Command workflow trigger": {
      "main": [
        [
          {
            "node": "Reply to user directly",
            "type": "main",
            "index": 0
          },
          {
            "node": "if has flag",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get user here for example": {
      "main": [
        [
          {
            "node": "Format data into nice structure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate webhook signature": {
      "main": [
        [
          {
            "node": "Validate Slack token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete user here for example": {
      "main": [
        [
          {
            "node": "Confirm user was deleted",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format data into nice structure": {
      "main": [
        [
          {
            "node": "Found user",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook to call for Slack command": {
      "main": [
        [
          {
            "node": "Set vars",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "pinData": {}
}