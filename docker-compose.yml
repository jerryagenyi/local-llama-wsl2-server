services:
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    user: "node"
    ports:
      - "5678:5678"
    environment:
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - N8N_EDITOR_BASE_URL=https://n8n.jerryagenyi.xyz
      - WEBHOOK_URL=https://n8n.jerryagenyi.xyz
      - NODE_ENV=production
      - QUEUE_HEALTH_CHECK_ACTIVE=true
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - tunnel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5678/healthz/readiness"]
      interval: 30s
      timeout: 10s
      retries: 3

  litellm:
    image: ghcr.io/berriai/litellm:main-latest
    container_name: litellm-api
    ports:
      - "4000:4000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - LITELLM_MASTER_KEY=${LITELLM_MASTER_KEY}
      - LITELLM_SALT_KEY=${LITELLM_SALT_KEY}
      - LITELLM_API_KEY=${LITELLM_API_KEY}
      - STORE_MODEL_IN_DB=True
      - DEBUG=true
    volumes:
      - ./config/litellm/config.yaml:/app/config.yaml:ro
    command: ["--config", "/app/config.yaml", "--port", "4000", "--num_workers", "1"]
    networks:
      - tunnel-network
    restart: unless-stopped
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared-tunnel
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      - tunnel-network
    restart: unless-stopped
    depends_on:
      - litellm

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - tunnel-network
    restart: unless-stopped

  flowise:
    image: flowiseai/flowise:latest
    container_name: flowise
    ports:
      - "3000:3000"
    volumes:
      - flowise_data:/root/.flowise
    environment:
      - PORT=3000
    restart: unless-stopped
    networks:
      - tunnel-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  agent-zero:
    image: agent0ai/agent-zero:latest
    container_name: agent-zero
    ports:
      - "8080:80"
    volumes:
      - agent_zero_data:/a0
      - ./config/agent-zero:/a0/config:rw
    environment:
      - AUTH_LOGIN=${AGENT_ZERO_LOGIN:-admin}
      - AUTH_PASSWORD=${AGENT_ZERO_PASSWORD:-admin123}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - LITELLM_API_KEY=${LITELLM_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    restart: unless-stopped
    networks:
      - tunnel-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - litellm

networks:
  tunnel-network:
    driver: bridge

volumes:
  n8n_data:
  flowise_data:
  postgres_data:
  agent_zero_data: